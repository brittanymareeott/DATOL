#!/usr/bin/env bash

# Author: Gregg Mendez
# 
# Software Dependencies:
# Python 2.7
#   BioPython
#   glob
#   sys
#   argparse
# blastp (current version 2.2.28+) from BLAST+ https://blast.ncbi.nlm.nih.gov/Blast.cgi?PAGE_TYPE=BlastDocs&DOC_TYPE=Download
# samtools faidx (current version 0.1.19+) from http://www.htslib.org
# bash version 4.x (3.x as found in MacOS 10.11.1 and earlier does not work)
#
# You need to generate several input datafiles before running this script:
# 1) ORFs available for both DNA and peptides for each species in fasta format. A separate fasta formatted file for each species.
# 2) blast databases for each peptide fasta file
# 3) query sequences in fasta format. A separate fasta file for each gene
# 4) HMMs for each query gene
# 5) A cutoff file with a bitscore cutoff specified for each gene
#
# Scripts called by this script:
# 1) big_blastp.sh - This performs the blast searches, searching for each gene of interest against the blast databases of your species of interest
# 2) PepFromBlast.py - This parses the blast result files, producing a text file for each gene-species combo needed to look up the sequence
# 3) get_seq.sh - This uses the text file from PepFromBlast.py to write sequence files
# 4) hmm_from_pep.sh - This performs and hmmsearch on each sequence from the blast search to filter the results based on the cutoff scores
# 5) parse_hmm_search.py - This generates a text file form the hmmsearch output needed to lookup the sequences
# 6) write_cds_pep.sh - This uses the text file generated by parse_hmm_search.py to write a dna and peptide file for each sequence
# 7) gene_species_table.sh - This generates a table (in csv format) indicating the presence or absence of genes in the species searched.
#
# Named variables. Every run needs the following defined:
# 1) -f | --fasta_dir - The directory containing the large fasta files to fetch the sequences from.
# 2) -db | --database_dir - The directory containing the blast databases of transcriptome ORFs. Each database should be named in the format species.fa.transdecoder.pep
# 3) -q | --query_dir - The directory containing the fasta files for each gene to use as query terms. Each gene should have a separate fasta file
# 4) -hmm | --hmm_dir - The directory containing the HMMs for each gene
# 5) -c | --cutoff_file - The file defining cut off values for each gene
# 6) -o | --output_dir - The directory to put the output
# 7) -t | --threads - How many threads to use.

#Code to handle the named variable inputs:
while [[ $# > 1 ]]
do
key="$1"

case $key in
    -f|--fasta_dir)
    FASTA="$2"
    shift # past argument
    ;;
    -db|--database_dir)
    DBS="$2"
    shift # past argument
    ;;
    -q|--query_dir)
    QUERY="$2"
    shift # past argument
    ;;
    -hmm|--hmm_dir)
    HMM_DIR="$2"
    shift # past argument
    ;;
    -c|--cutoff_file)
    CUTOFF_FILE="$2"
    shift # past argument
    ;;
    -o|--output_dir)
    MASTER_OUT="$2"
    shift # past argument
    ;;
    -t|--threads)
    THREADS="$2"
    shift # past argument
    ;;
    *)
    # unknown option
    ;;
esac
shift # past argument or value
done

# Create a working directory based on current date and time
WORK="Working_Dir_"$(echo $(date) | sed 's, ,_,g' | sed 's,:,,g')
mkdir -p $MASTER_OUT/$WORK
mkdir -p $MASTER_OUT/$WORK/big_blastp
mkdir -p $MASTER_OUT/$WORK/pepfromblast
mkdir -p $MASTER_OUT/$WORK/get_seq
mkdir -p $MASTER_OUT/$WORK/hmmsearch
mkdir -p $MASTER_OUT/$WORK/parse_hmm_search
mkdir -p $MASTER_OUT/$WORK/write_cds_pep

# Start a log
echo LOOP run on $(date) >> $MASTER_OUT/log.txt
echo Output Directory = "$MASTER_OUT" >> $MASTER_OUT/log.txt
echo Working Directory = "$WORK" >> $MASTER_OUT/log.txt
echo Fasta Directory = "$FASTA" >> $MASTER_OUT/log.txt
echo Database Directory = "$DBS" >> $MASTER_OUT/log.txt
echo Query Directory = "$QUERY" >> $MASTER_OUT/log.txt
echo HMM Directory = "$HMM_DIR" >> $MASTER_OUT/log.txt
echo Cut-off file = "$CUTOFF_FILE" >> $MASTER_OUT/log.txt
echo Threads = "$THREADS" >> $MASTER_OUT/log.txt

# First perform the blast searches
echo "Starting big_blastp.sh run on $(date)" >> $MASTER_OUT/log.txt
big_blastp.sh -db $DBS -q $QUERY -o $MASTER_OUT/$WORK/big_blastp -t $THREADS
echo "Completed big_blastp.sh run on $(date)" >> $MASTER_OUT/log.txt
# Next parse the blast output and generate text files for lookup
echo "Starting PepFromBlast.py run on $(date)" >> $MASTER_OUT/log.txt
PepFromBlast.py --blast $MASTER_OUT/$WORK/big_blastp/ --outdir $MASTER_OUT/$WORK/pepfromblast/
echo "Completed PepFromBlast.py run on $(date)" >> $MASTER_OUT/log.txt
# Get the sequences from the blast search using the text files from PepFromBlast.py
echo "Starting get_seq.sh run on $(date)" >> $MASTER_OUT/log.txt
get_seq.sh -i $MASTER_OUT/$WORK/pepfromblast -o $MASTER_OUT/$WORK/get_seq -f $FASTA -t $THREADS
echo "Completed get_seq.sh run on $(date)" >> $MASTER_OUT/log.txt
# Perform hmmsearch using sequences just fetched
echo "Starting hmm_from_pep.sh run on $(date)" >> $MASTER_OUT/log.txt
hmm_from_pep.sh -hmm $HMM_DIR -c $CUTOFF_FILE -i $MASTER_OUT/$WORK/get_seq -o $MASTER_OUT/$WORK/hmmsearch
echo "Completed hmm_from_pep.sh run on $(date)" >> $MASTER_OUT/log.txt
# Parse the hmmsearch output to generate text files for lookup
echo "Starting parse_hmm_search.py run on $(date)" >> $MASTER_OUT/log.txt
parse_hmm_search.py --hmm $MASTER_OUT/$WORK/hmmsearch/ --outdir $MASTER_OUT/$WORK/parse_hmm_search/
echo "Completed parse_hmm_search.py run on $(date)" >> $MASTER_OUT/log.txt
# Write out final sequence files from text files from parse_hmm_search.py
echo "Starting write_cds_pep.sh run on $(date)" >> $MASTER_OUT/log.txt
write_cds_pep.sh -i $MASTER_OUT/$WORK/parse_hmm_search -o $MASTER_OUT/$WORK/write_cds_pep -f $FASTA -t $THREADS
echo "Completed write_cds_pep.sh run on $(date)" >> $MASTER_OUT/log.txt
# Generate coverage table
echo "Starting gene_species_table.sh run on $(date)" >> $MASTER_OUT/log.txt
gene_species_table.sh -i $MASTER_OUT/$WORK/write_cds_pep/TopHits/CDS -o $MASTER_OUT
echo "Completed gene_species_table.sh run on $(date)" >> $MASTER_OUT/log.txt