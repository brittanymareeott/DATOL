#!/usr/bin/env bash
#
# loop.sh
#
# Author: Gregg Mendez
#
# Software Dependencies:
# usearch v8.1 : http://drive5.com/usearch/
# Python 2.7
#   BioPython
#   glob
#   sys
#   argparse
# samtools faidx (current version 0.1.19+) from http://www.htslib.org
# bash version 4.x (3.x as found in MacOS 10.11.1 and earlier does not work)
#
# You need to generate several input datafiles before running this script:
# 1) ORFs available for both DNA and peptides for each species in fasta format. A separate fasta formatted file for each species. File name must be species name followed by .fasta.
# 2) query sequences in fasta format. A separate fasta file for each gene
# 3) HMMs for each query gene
# 4) A cutoff file with a bitscore cutoff specified for each gene
#
# Scripts called by this script:
# 1) big_ublast.sh - This performs the ublast searches, searching for each gene of interest against the ublast databases of your species of interest
# 2) PepFromBlast.py - This parses the blast result files, producing a text file for each gene-species combo needed to look up the sequence
# 3) get_seq.sh - This uses the text file from PepFromBlast.py to write sequence files
# 4) hmm_from_pep.sh - This performs and hmmsearch on each sequence from the blast search to filter the results based on the cutoff scores
# 5) parse_hmm_search.py - This generates a text file form the hmmsearch output needed to lookup the sequences
# 6) write_cds_pep.sh - This uses the text file generated by parse_hmm_search.py to write a dna and peptide file for each sequence
# 7) gene_species_table.sh - This generates a table (in csv format) indicating the presence or absence of genes in the species searched.
# 8) degenerate.py - This script converts the 3rd codon position in DNA fasta files to a degenerate base synonymous with the same codon.
#
# Named variables. Every run needs the following defined:
# 1) -d | --dna_dir - The directory containing the open reading frames (DNA sequences).
# 2) -p | --protein_dir - The directory containing the translated open reading frames (protein sequences).
# 3) -q | --query_dir - The directory containing query directory, hmm directory, and score_cutoffs.txt file.
# 4) -o | --output_dir - The directory to put the output
# 5) -t | --threads - How many threads to use.

#Code to handle the named variable inputs:
while [[ $# > 1 ]]
do
key="$1"

case $key in
    -d|--dna_dir)
    DNA="$2"
    shift # past argument
    ;;
    -p|--protein_dir)
    PROT="$2"
    shift # past argument
    ;;
    -q|--query_dir)
    QUERY_DIR="$2"
    shift # past argument
    ;;
    -o|--output_dir)
    MASTER_OUT="$2"
    shift # past argument
    ;;
    -t|--threads)
    THREADS="$2"
    shift # past argument
    ;;
    *)
    # unknown option
    ;;
esac
shift # past argument or value
done

#Template directory:
TEMPLATE=~/bin/templates
export TEMPLATE

QUERY=$QUERY_DIR/query
HMM_DIR=$QUERY_DIR/hmms
CUTOFF_FILE=$QUERY_DIR/scores_cutoff.txt

mkdir -p $MASTER_OUT
# Create a working directory based on which iteration of the loop this is
LOOP_COUNT=$(find $MASTER_OUT -path "$MASTER_OUT/loop*" -prune | wc -l )
LOOP_NUMBER=$(($LOOP_COUNT + 1))
mkdir -p $MASTER_OUT/"loop_"$LOOP_NUMBER"_out/tmp"
LOOP_DIR=$MASTER_OUT/"loop_"$LOOP_NUMBER"_out"
WORKING=$MASTER_OUT/"loop_"$LOOP_NUMBER"_out/tmp"
export WORKING
mkdir -p $WORKING/blast_dbs
DBS=$WORKING/blast_dbs
export DBS
mkdir -p $WORKING/big_ublast
mkdir -p $WORKING/get_seq
mkdir -p $WORKING/hmmsearch
mkdir -p $WORKING/parse_hmm_search
mkdir -p $LOOP_DIR/sequences
REPORT=$MASTER_OUT/report
export REPORT

# Logging
echo LOOP run $LOOP_NUMBER $(date) >> $MASTER_OUT/log.txt
echo Output Directory = "$MASTER_OUT" >> $MASTER_OUT/log.txt
echo Working Directory = "$WORKING" >> $MASTER_OUT/log.txt
echo DNA Directory = "$DNA" >> $MASTER_OUT/log.txt
echo Protein Directory = "$PROT" >> $MASTER_OUT/log.txt
echo Query Directory = "$QUERY" >> $MASTER_OUT/log.txt
echo Threads = "$THREADS" >> $MASTER_OUT/log.txt

##################################################################
# If this is the very first loop run then process our input files
# remove duplicate sequences, remove very short sequences, remove
# third codon positions from DNA data.
##################################################################

if [ $LOOP_NUMBER -eq 1 ]; then

    ##################################################################
    ## Prepare input files
    ##################################################################

    # First lets degenerate the 3rd codon position in our DNA data
    echo "Starting degenerate.py DNA on $(date)" >> $MASTER_OUT/log.txt
    printf "***********   Starting degenerate.py DNA `date` ...\n"
    cd $DNA
     FILE=($(find $PROT/*.fasta -type f | sed 's#.*/##' | sed 's,.fasta,,' ))
    printf "%s\n" "${FILE[@]}" | xargs -n 1 -P $THREADS -I % degenerate.py --dna %".fasta"
    mkdir $MASTER_OUT/CDS_degenerate_seqs
    mv *.deg.fas $MASTER_OUT/CDS_degenerate_seqs
    cd $MASTER_OUT/CDS_degenerate_seqs
    printf "%s\n" "${FILE[@]}" | xargs -n 1 -P $THREADS -I % mv %".deg.fas" %".fasta"
    DNA=$MASTER_OUT/CDS_degenerate_seqs
    echo DNA Directory changed to "$DNA" >> $MASTER_OUT/log.txt

    # Next remove duplicate and short sequences from the protein file
    printf "***********   Starting sequence de-replication `date` ...\n"
    echo "Starting sequence replication on $(date)" >> $MASTER_OUT/log.txt
    cd $PROT
    mkdir $LOOP_DIR/PEP_dereplicated
    printf "%s\n" "${FILE[@]}" | xargs -n 1 -P $THREADS -I % usearch -derep_prefix %".fasta" -fastaout %".derep.fas" -minseqlength 40 1> $LOOP_DIR"/PEP_dereplicated/stdout.txt" 2> $LOOP_DIR"/PEP_dereplicated/stderr.txt"
    mv *.derep.fas $LOOP_DIR/PEP_dereplicated
    cd $LOOP_DIR/PEP_dereplicated
    printf "%s\n" "${FILE[@]}" | xargs -n 1 -P $THREADS -I % mv %".derep.fas" %".fasta"
    PROT=$LOOP_DIR/PEP_dereplicated
    echo Protein Directory changed to "$PROT" >> $MASTER_OUT/log.txt

    ##################################################################
    ### Create initial report files
    ##################################################################

    # Create report directory and index page
    mkdir $MASTER_OUT/report
    cp $TEMPLATE/index.html $REPORT/index.html
    cp $TEMPLATE/styles.css $REPORT/styles.css

    # Generate species list and create report pages for each species
    mkdir $REPORT/species
    cd $PROT
    SPECIES=( $(find . -name '*.fasta' -type f | sed 's#.*/##' | sort | uniq | sed 's,.fasta,,') )
    printf "%s\n" "${SPECIES[@]}" | xargs -n 1 -P 1 -I %x bash -c 'SPECIES=%x;\
        cp $TEMPLATE/species.html $REPORT/species/$SPECIES".html";\
        sed -i "s,<\!--SPECIES-->,$SPECIES,g" $REPORT/species/$SPECIES".html";\
        printf "\t\t\t<tr><td><a href=\"../species/%s.html\">%s</a></td><!--"ROW_$SPECIES"--></tr>\n" "$SPECIES" "$SPECIES" >> $REPORT/species/species_table.txt;\'

    # Generate gene list and create report pages for each gene
    mkdir $REPORT/genes
    cd $QUERY
    GENES=( $( find . -name "*.fas" -type f | sed 's#.*/##' | sort | sed 's,.fas,,' ) )
    printf "%s\n" "${GENES[@]}" | xargs -n 1 -P 1 -I %x bash -c 'GENE=%x;\
        cp $TEMPLATE/gene.html $REPORT/genes/$GENE".html";\
        sed -i "s,<\!--GENE-->,$GENE,g" $REPORT/genes/$GENE".html";\
        LINE=21;\
        sed -i "${LINE}r $REPORT/species/species_table.txt" $REPORT/genes/$GENE".html"
        printf "\t\t\t<tr><td><a href=\"../genes/%s.html\">%s</a></td><!--ROW_"$GENE"--></tr>\n" "$GENE" "$GENE" >> $REPORT/genes/gene_table.txt'
    printf "%s\n" "${SPECIES[@]}" | xargs -n 1 -P $THREADS -I % bash -c 'LINE=21;\
        sed -i "${LINE}r $REPORT/genes/gene_table.txt" $REPORT/species/%".html"'
    # Now add species and gene tables to the index page.
    LINE=37
    sed -i "${LINE}r $REPORT/species/species_table.txt" $REPORT/index.html
    LINE=24
    sed -i "${LINE}r $REPORT/genes/gene_table.txt" $REPORT/index.html
    sed -i "s,href=\"../,href=\"," $REPORT/index.html
fi

##################################################################
## uBlast Steps
##################################################################

# First generate ublast databases
printf "***********   Generating ublast databases `date` ...\n"
echo "Generating ublast databases on $(date)" >> $MASTER_OUT/log.txt
cd $PROT
find *.fasta | xargs -n 1 -P $THREADS -I % bash -c 'FILE=%;\
    SPECIES=${FILE/.fasta/};\
    usearch -makeudb_ublast $FILE -output "$DBS"/"$SPECIES".udb 1> "$DBS"/stdout.txt 2> "$DBS"/stderr.txt'

# Next perform the ublast searches
echo "Starting big_ublast.sh run on $(date)" >> $MASTER_OUT/log.txt
echo "big_ublast.sh -db $DBS -q $QUERY -o $WORKING/big_ublast -t $THREADS" >> $MASTER_OUT/log.txt
printf "***********   Starting Big ublast `date` ...\n"
big_ublast.sh -db $DBS -q $QUERY -o $WORKING/big_ublast -t $THREADS

# # Delete those ublast dbs because they take up a lot of space
# echo "Deleting ublast databases $(date)" >> $MASTER_OUT/log.txt
# rm $WORKING/blast_dbs/*
# touch $WORKING/blast_dbs/databases_deleted_following_use.txt

# Get the sequences from the ublast search
echo "Starting get_seq.sh run on $(date)" >> $MASTER_OUT/log.txt
echo "get_seq.sh -i $WORKING/big_ublast -o $WORKING/get_seq -f $PROT -t $THREADS -r $REPORT" >> $MASTER_OUT/log.txt
printf "***********   Starting get_seq.sh on `date` ...\n"
get_seq.sh -i $WORKING/big_ublast -o $WORKING/get_seq -f $PROT -t $THREADS -r $REPORT


##################################################################
## HMMSearch Steps
##################################################################

# Perform hmmsearch using sequences just fetched
echo "Starting hmm_from_pep.sh run on $(date)" >> $MASTER_OUT/log.txt
echo "hmm_from_pep.sh -hmm $HMM_DIR -c $CUTOFF_FILE -i $WORKING/get_seq -o $WORKING/hmmsearch -t $THREADS" >> $MASTER_OUT/log.txt
printf "***********   Starting hmmsearches on `date` ...\n"
hmm_from_pep.sh -hmm $HMM_DIR -c $CUTOFF_FILE -i $WORKING/get_seq -o $WORKING/hmmsearch -t $THREADS

# Parse the hmmsearch output to generate text files for lookup
echo "Starting parse_hmm_search.py run on $(date)" >> $MASTER_OUT/log.txt
echo "parse_hmm_search.py --hmm $WORKING/hmmsearch/ --outdir $WORKING/parse_hmm_search/" >> $MASTER_OUT/log.txt
printf "***********   Starting parse_hmm_search.py on `date` ...\n"
parse_hmm_search.py --hmm $WORKING/hmmsearch/ --outdir $WORKING/parse_hmm_search/

# Add Hmmsearch hit counts to report table
# Function to parse the input file name and set variables for gene name, species
function FIND_SPECIES_GENE()
{
    SPLIT_FILE=($(echo $1 | tr "\." "\n" | tr "_" "\n"))
    unset SPLIT_FILE[${#SPLIT_FILE[@]}-1]
    GENE=${SPLIT_FILE[0]}
    SPECIES_SPACED=${SPLIT_FILE[@]:1}
    SPECIES=${SPECIES_SPACED// /_}
}
function ADD_COLUMN () {
	FILE=$1
	FIND_SPECIES_GENE $FILE
    RPATH=../OtherHits
	if [ -f $RPATH/$FILE ]
		then OFILE=$RPATH/$FILE
		OCOUNT=$(wc -l < $OFILE)
		else OCOUNT=0
	fi
	ONE=1
	ROW=\<\!--ROW_"$SPECIES"--\>
	TOTAL=$(($ONE + $OCOUNT))
 	sed -i "s,$ROW,<td class='hmm'>$TOTAL</td>$ROW," $REPORT/genes/$GENE".html"
	ROW=\<\!--ROW_"$GENE"--\>
	sed -i "s,$ROW,<td class='hmm'>$TOTAL</td>$ROW," $REPORT/species/$SPECIES".html"
}
export -f ADD_COLUMN
export -f FIND_SPECIES_GENE
cd $WORKING/parse_hmm_search/TopHits
FILE=($(find -name "*.txt" -type f | sed 's#.*/##' ))
printf "%s\n" "${FILE[@]}" | xargs -n 1 -P $THREADS -I % bash -c 'ADD_COLUMN %'

# Add header column to gene report files and fill in zero counts in species and gene tables
cd $REPORT/genes
FILE=($(find *.html -type f | sed 's#.*/##'))
printf "%s\n" "${FILE[@]}" | xargs -n 1 -P $THREADS -I % sed -i "s,\(<\!--THEAD-->\),<th>hmmsearch hits</th>\1,;s,\(<td class=\"ublast\">[0-9]*</td>\)<\!,\1<td class='hmm'>0</td><\!," %
cd $REPORT/species
FILE=($(find *.html -type f -exec basename {} \;))
printf "%s\n" "${FILE[@]}" | xargs -n 1 -P $THREADS -I % sed -i "s,\(<\!--THEAD-->\),<th>hmmsearch hits</th>\1,;s,\(<td class=\"ublast\">[0-9]*</td>\)<\!,\1<td class='hmm'>0</td><\!," %

# Write final sequence files from text files from parse_hmm_search.py
echo "Starting write_cds_pep.sh run on $(date)" >> $MASTER_OUT/log.txt
echo "write_cds_pep.sh -i $WORKING/parse_hmm_search -o $LOOP_DIR/sequences -d $DNA -p $PROT -t $THREADS" >> $MASTER_OUT/log.txt
printf "***********   Starting write_cds_pep.sh on `date` ...\n"
write_cds_pep.sh -i $WORKING/parse_hmm_search -o $LOOP_DIR/sequences -d $DNA -p $PROT -t $THREADS

##################################################################
## Final Reporting
##################################################################

# Generate coverage table
echo "Starting gene_species_table.sh run on $(date)" >> $MASTER_OUT/log.txt
echo "gene_species_table.sh -i $LOOP_DIR/sequences/TopHits/CDS -o $LOOP_DIR" >> $MASTER_OUT/log.txt
printf "***********   Starting gene_species_table.sh on `date` ...\n"
gene_species_table.sh -i $LOOP_DIR/sequences/TopHits/CDS -o $LOOP_DIR

if [ $LOOP_NUMBER -eq 1 ]; then

printf "*************************************************************\n\n\t
\tReview the table printed to gene_species_table.csv. Generate species and\n
\tgene lists\n\tthat include a set of species and genes with very few gaps in\n
\tthe data. Then run the \n\tpretree_loop.sh script to generate alignments for\n
\ttree finding. We recoomend placing your species.txt and genes.txt file in loop_1_out/lists. \n\n
pretree_loop.sh -i $MASTER_OUT -s $LOOP_DIR/lists/species.txt -g $LOOP_DIR/lists/genes.txt -t $THREADS

\n\n*************************************************************\n"

else

printf "*************************************************************\n\n\t
\tReview the table printed to gene_species_table.csv. Generate species and\n
\tgene lists\n\tthat include a set of species and genes with very few gaps in\n
\tthe data. Then run the \n\tfinal_check.sh script to do final analyses and get\n
\t suggestions on which genes to use. We recoomend placing your species.txt and genes.txt file in loop_1_out/lists and your outgroups file in your main directory. \n\n
final_check.sh -i $MASTER_OUT -s $LOOP_DIR/lists/species.txt -g $LOOP_DIR/lists/genes.txt -og $MASTER_OUT/outgroups.txt -t $THREADS

\n\n*************************************************************\n"

fi
